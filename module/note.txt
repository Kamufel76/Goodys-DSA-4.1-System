Hooks.on('renderChatMessage', function (app, html, data) {
    let actor = ChatMessage.getSpeakerActor(data.message.speaker);

    if (!game.user.isGM) {
        html.find(".gm-only").remove();
    }

    if (!((actor && actor.isOwner) || game.user.isGM || (data.author.id === game.user.id))) {
        html.find(".actions button").not(".active-defense").remove();
    }

    
    html.find(".actions").not(":has(button)").remove();
    
html.find(".rollable").click(event => {
        
        const type = $(event.currentTarget).closestData("roll-type");

        if (type === "damage") {
            const damage = $(event.currentTarget).closestData("damage");
            const features = $(event.currentTarget).closestData("features");
            const source = $(event.currentTarget).closestData("source");
            Dice.damage(damage, features, source);
        }

        if (type === "magicFumble") {
            event.preventDefault();
            event.stopPropagation()
            const eg = $(event.currentTarget).closestData("success");
            const costs = $(event.currentTarget).closestData("costs");
            const skill = $(event.currentTarget).closestData("skill");

            actor.rollMagicFumble(eg, costs, skill);
        }

        if (type === "attackFumble") {
           event.preventDefault();
           actor.rollAttackFumble();
        }
    });

    html.find(".consume").click(event => {
        event.preventDefault();
        event.stopPropagation()
        const type = $(event.currentTarget).closestData('type');
        const value = $(event.currentTarget).closestData('value');
        const description = $(event.currentTarget).closestData('description');
        actor.consumeCost(type, value, description);
    });

    html.find(".apply-damage").click(event => {
        event.preventDefault();
        event.stopPropagation()
        let value = $(event.currentTarget).closestData("damage");
        let type = $(event.currentTarget).closestData("type");
        let source = $(event.currentTarget).closestData("source");
        ApplyDamageDialog.create(value,type, source);
    });

    html.find(".active-defense").click(event => {
        event.preventDefault();
        event.stopPropagation()
        let type = $(event.currentTarget).closestData("type");
        
        const speaker = ChatMessage.getSpeaker();
        let actor;
        if (speaker.token) actor = game.actors.tokens[speaker.token];
        if (!actor) actor = game.actors.get(speaker.actor);
        if (!actor) {
            ui.notifications.info(game.i18n.localize("splittermond.pleaseSelectAToken"));
            return
        };

        actor.activeDefenseDialog(type);
    });

    html.find(".fumble-table-result").click(event => {
        html.find(".fumble-table-result-item").not(".fumble-table-result-item-active").toggle(200);
    });

    html.find(".use-splinterpoint").click(event => {
        event.preventDefault();
        event.stopPropagation()
        
        let chatMessageId = $(event.currentTarget).closestData("message-id");
        let message = game.messages.get(chatMessageId);
        
        const speaker = message.data.speaker;
        let actor;
        if (speaker.token) actor = game.actors.tokens[speaker.token];
        if (!actor) actor = game.actors.get(speaker.actor);
        
        actor.useSplinterpointBonus(message);
    });

    html.find('.remove-status').click(async event => {
        const statusId = $(event.currentTarget).closestData('status-id');

        let chatMessageId = $(event.currentTarget).closestData("message-id");
        let message = game.messages.get(chatMessageId);
        
        const speaker = message.data.speaker;
        let actor;
        if (speaker.token) actor = game.actors.tokens[speaker.token];
        if (!actor) actor = game.actors.get(speaker.actor);

        await actor.deleteEmbeddedDocuments("Item", [statusId]);
        await Hooks.call("redraw-combat-tick");
    });